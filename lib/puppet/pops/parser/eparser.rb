#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 877)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'72,74,288,-140,61,67,80,68,84,85,86,276,111,288,-262,291,72,74,123,83',
'163,119,-271,289,21,20,113,332,116,-276,110,52,112,55,289,63,12,281',
'59,44,47,277,54,45,10,11,-140,91,62,19,125,144,46,115,122,17,18,-262',
'87,89,88,90,124,79,-274,-271,123,123,123,53,333,145,-276,43,75,92,77',
'78,76,-179,-179,60,49,64,65,56,364,435,58,72,74,66,434,61,67,288,68',
'254,125,125,125,111,122,122,122,288,309,-274,291,310,124,124,124,21',
'20,113,289,116,291,110,52,112,55,161,63,12,289,59,44,47,81,54,45,10',
'11,111,138,62,19,255,322,46,115,153,17,18,138,186,434,113,188,116,79',
'110,191,112,162,451,53,141,83,123,43,75,92,77,78,-261,123,141,60,49',
'64,65,56,288,115,58,72,74,66,256,61,67,138,68,383,91,291,494,91,93,94',
'125,434,269,289,122,92,123,125,384,21,20,122,124,366,141,270,52,-261',
'55,124,63,12,288,59,44,47,271,54,45,10,11,111,144,62,19,291,274,46,125',
'275,17,18,122,289,447,113,446,116,79,110,124,112,279,123,53,447,303',
'446,43,75,123,77,78,127,128,304,60,49,64,65,56,153,115,58,72,74,66,307',
'61,67,307,68,-179,-179,311,125,83,93,94,122,127,128,125,91,92,123,122',
'124,21,20,-180,-180,-181,-181,124,52,91,55,91,63,12,91,59,44,47,330',
'54,45,10,11,111,153,62,19,267,266,46,125,338,17,18,122,267,266,113,356',
'116,79,110,124,112,357,123,53,267,266,359,43,75,123,77,78,267,266,363',
'60,49,64,65,56,368,115,58,72,74,66,370,61,67,374,68,98,97,376,125,291',
'93,94,122,313,312,125,379,92,123,122,124,21,20,324,325,380,288,124,52',
'392,55,393,63,130,394,59,44,47,395,54,45,398,99,111,279,62,19,402,404',
'46,125,379,17,18,122,-216,410,113,412,116,79,110,124,112,419,123,53',
'420,330,331,43,75,423,77,78,426,379,379,60,49,64,65,56,144,115,58,72',
'74,66,436,61,67,437,68,98,97,440,125,111,93,94,122,441,444,429,448,92',
'450,459,124,21,20,113,461,116,462,110,52,112,55,330,63,130,466,59,44',
'47,468,54,45,330,99,471,472,62,19,330,475,46,115,479,17,18,450,481,482',
'72,74,483,79,163,484,330,489,490,53,491,492,493,43,75,502,77,78,503',
'504,506,60,49,64,65,56,507,508,58,72,74,66,359,61,67,,68,,,,161,111',
',158,,,,,,,,,,21,20,113,,116,,110,52,112,55,79,63,130,,59,44,47,,54',
'45,162,75,111,,62,19,,,46,115,,17,18,,,,113,,116,79,110,,112,,,53,,',
',43,75,,77,78,,,,60,49,64,65,56,,115,58,72,74,66,,61,67,,68,,,,,111',
'93,94,,,,,,92,,,,21,20,113,,116,,110,52,112,55,,63,12,,59,44,47,,54',
'45,10,11,111,,62,19,,,46,115,,17,18,,,,113,,116,79,110,,112,,,53,,,',
'43,75,,77,78,,,,60,49,64,65,56,,115,58,72,74,66,,61,67,,68,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74',
'66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,137,,,,,52,,55,,63,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,72,74,,79,163,,,,,53,,,,43,75,',
'77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,161,,,158,,,,,,',
',,,21,20,,,,,,52,,55,79,63,130,,59,44,47,,54,45,162,75,,,62,19,,,46',
',,17,18,,,,72,74,,79,163,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,',
'58,72,74,66,,61,67,,68,,,,161,,,158,,,,,,,,,,21,20,,,,,,52,,55,79,63',
'130,,59,44,47,,54,45,162,75,,,62,19,,,46,,,17,18,,,,72,74,,79,163,,',
',,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,161',
',,158,,,,,,,,,,21,20,,,,,,52,,55,79,63,130,,59,44,47,,54,45,162,75,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,170,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43',
'75,,77,78,,,,168,165,64,65,166,175,174,167,72,74,66,,61,67,177,68,,',
',,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,168,165,64,65,166,175',
'174,167,72,74,66,,61,67,,68,179,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43',
'75,,77,78,,,,168,165,64,65,166,175,174,167,72,74,66,,61,67,,68,,,,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,',
',46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58',
'72,74,66,,61,67,,190,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,',
',60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,',
'52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,',
',,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,',
',,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58',
'72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44',
'47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79',
',,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,',
',,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21',
'20,,,,,,208,223,214,224,63,216,226,218,44,206,,210,204,,,,,62,19,227',
'222,205,,,17,203,,,,,,,79,,,,,225,209,,,,43,75,,77,78,,,,219,207,220',
'221,215,229,228,217,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53',
',,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66',
',61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64',
'65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63',
'130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,',
',,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72',
'74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60',
'49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53',
',,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66',
',61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64',
'65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63',
'130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,',
',,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,79,,,,,,53,,,251,43,75,,77,78,,,,60,49,64,65,56,,,58',
'72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,',
',60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,',
'52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,',
',53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74',
'66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,293,,,,,52,',
'55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,',
'53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,301,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19',
',,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58',
'72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44',
'47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,179,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,168,165,64,65,166,175,174,167,72,74,66',
',61,67,,68,,,331,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61',
'67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79',
',,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,386',
',,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,388,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,168,165,64,65',
'166,175,174,167,72,74,66,,61,67,,68,405,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,',
',53,,,,43,75,,77,78,,,,168,165,64,65,166,175,174,167,72,74,66,,61,67',
',68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,168,165,64',
'65,166,175,174,167,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,',
',53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74',
'66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61',
'67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,439,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67',
',68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,452,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75',
',77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77',
'78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,',
',58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,130,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78',
',,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,487,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,',
'68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65',
'56,,,58,72,74,66,,61,67,,68,496,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43',
'75,,77,78,,,,60,49,64,65,56,,,58,72,74,66,,61,67,,68,498,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49,64,65,56,,,58,72,74,66',
',61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,63,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,,43,75,,77,78,,,,60,49',
'64,65,56,,,58,72,74,66,,61,67,,68,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',63,130,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,79,,,,,,53,,,',
'43,75,,77,78,,,111,60,49,64,65,56,,,58,,,66,107,102,113,,116,,110,,112',
',103,105,104,106,,,,,,,,,,,,,,,,115,,,,109,108,,,95,96,98,97,100,101',
',93,94,111,,294,,,92,,,,,,,107,102,113,,116,,110,,112,,103,105,104,106',
',,,,99,,,,,,,,,,,115,,,,109,108,,,95,96,98,97,100,101,,93,94,111,,295',
',,92,,,,,,,107,102,113,,116,,110,,112,,103,105,104,106,,,,,99,,,,,,',
',,,,115,,,,109,108,,,95,96,98,97,100,101,,93,94,111,,296,,,92,,,,,,',
'107,102,113,,116,,110,,112,,103,105,104,106,,,,,99,,,,,,,,,,,115,,,',
'109,108,,111,95,96,98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112',
',103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109,108,,,95,96,98,97,100,101',
',93,94,,,,,,92,,,,111,,,,,,,324,325,,,,107,102,113,328,116,111,110,',
'112,99,103,105,104,106,,,,,,113,,116,,110,,112,,,,115,,,,109,108,,,95',
'96,98,97,100,101,,93,94,115,,,111,,92,,,95,96,98,97,,,,93,94,113,,116',
'111,110,92,112,,,,,,,99,,,,113,,116,,110,,112,,,,115,,,99,,,,,95,96',
'98,97,,,,93,94,115,,,111,,92,,,95,96,98,97,100,101,,93,94,113,,116,111',
'110,92,112,,,,,,,99,,,102,113,,116,,110,,112,,103,,115,,,99,,,,,95,96',
'98,97,100,101,,93,94,115,,,,,92,,111,95,96,98,97,100,101,,93,94,,,,102',
'113,92,116,111,110,,112,,103,99,,,,,,,102,113,,116,,110,,112,,103,99',
'115,,,,,,,,95,96,98,97,100,101,,93,94,115,,,,,92,,111,95,96,98,97,100',
'101,,93,94,,,,102,113,92,116,,110,,112,,103,99,,,,,,,,,,,,,,,,,99,115',
',,,,111,,,95,96,98,97,100,101,,93,94,107,102,113,,116,92,110,,112,,103',
'105,104,106,,,,,,,,,,,,,,,,115,99,,,,111,,,95,96,98,97,100,101,,93,94',
'107,102,113,,116,92,110,,112,,103,105,104,106,,,,,,,,,,,,,,,,115,99',
',,,108,,,95,96,98,97,100,101,111,93,94,,,334,,,92,,,,107,102,113,,116',
',110,,112,,103,105,104,106,,,,,,,,99,,,,,,,,115,,,,109,108,,111,95,96',
'98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104,106',
',,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107',
'102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109',
'108,,,95,96,98,97,100,101,111,93,94,,,,,,92,,,,107,102,113,360,116,',
'110,,112,,103,105,104,106,,,,,,,,99,,,,,,,,115,,,,109,108,,111,95,96',
'98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104,106',
',,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107',
'102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109',
'108,,111,95,96,98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,',
'103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100',
'101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,',
',,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107,102,113',
'92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115,,,,109,108,,111',
'95,96,98,97,100,101,,93,94,,,107,102,113,92,116,,110,,112,,103,105,104',
'106,,,,,,,,,,,,,,,99,115,,,,109,108,,111,95,96,98,97,100,101,,93,94',
',,107,102,113,92,116,,110,,112,,103,105,104,106,,,,,,,,,,,,,,,99,115',
',,,109,108,,,95,96,98,97,100,101,,93,94,,346,223,345,224,92,343,226',
'347,,340,,342,344,,,,,,,227,222,348,,,,341,,,,99,,,,,,,,225,349,,,,',
',,,,,,,352,350,353,351,354,229,228,355,346,223,345,224,,343,226,347',
',340,,342,344,,,,,,,227,222,348,,,,341,,,,,,,,,,,,225,349,,,,,,,,,,',
',352,350,353,351,354,229,228,355,346,223,345,224,,343,226,347,,340,',
'342,344,,,,,,,227,222,348,,,,341,,,,,,,,,,,,225,349,,,,,,,,,,,,352,350',
'353,351,354,229,228,355,346,223,345,224,,343,226,347,,340,,342,344,',
',,,,,227,222,348,,,,341,,,,,,,,,,,,225,349,,,,,,,,,,,,352,350,353,351',
'354,229,228,355,346,223,345,224,,343,226,347,,340,,342,344,,,,,,,227',
'222,348,,,,341,,,,,,,,,,,,225,349,,,,,,,,,,,,352,350,353,351,354,229',
'228,355,346,223,345,224,,343,226,347,,340,,342,344,,,,,,,227,222,348',
',,,341,,,,,,,,,,,,225,349,,,,,,,,,,,,352,350,353,351,354,229,228,355' ]
        racc_action_table = arr = ::Array.new(10028, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,144,206,0,0,1,0,7,7,7,141,231,290,204,144,186,186,12,5,186,12,205',
'144,0,0,231,213,231,220,231,0,231,0,290,0,0,144,0,0,0,141,0,0,0,0,206',
'8,0,0,12,50,0,231,12,0,0,204,7,7,7,7,12,0,221,205,55,56,60,0,213,51',
'220,0,0,231,0,0,0,206,206,0,0,0,0,0,266,371,0,4,4,0,371,4,4,266,4,113',
'55,56,60,232,55,56,60,188,178,221,266,178,55,56,60,4,4,232,266,232,188',
'232,4,232,4,304,4,4,188,4,4,4,4,4,4,4,4,235,49,4,4,113,188,4,232,58',
'4,4,165,75,389,235,76,235,4,235,80,235,304,389,4,49,82,216,4,4,232,4',
'4,216,126,165,4,4,4,4,4,379,235,4,10,10,4,114,10,10,207,10,292,117,379',
'476,118,235,235,216,476,133,379,216,235,130,126,292,10,10,126,216,267',
'207,134,10,216,10,126,10,10,267,10,10,10,136,10,10,10,10,236,137,10',
'10,267,139,10,130,140,10,10,130,267,386,236,386,236,10,236,130,236,143',
'152,10,444,154,444,10,10,166,10,10,16,16,156,10,10,10,10,10,167,236',
'10,11,11,10,169,11,11,176,11,47,47,181,152,192,236,236,152,57,57,166',
'197,236,168,166,152,11,11,61,61,62,62,166,11,198,11,199,11,11,200,11',
'11,11,202,11,11,11,11,233,217,11,11,120,120,11,168,253,11,11,168,150',
'150,233,258,233,11,233,168,233,260,214,11,151,151,261,11,11,215,11,11',
'164,164,264,11,11,11,11,11,268,233,11,17,17,11,272,17,17,277,17,233',
'233,278,214,279,233,233,214,183,183,215,282,233,219,215,214,17,17,410',
'410,288,289,215,17,297,17,298,17,17,299,17,17,17,300,17,17,302,233,234',
'305,17,17,306,308,17,219,321,17,17,219,326,327,234,329,234,17,234,219',
'234,335,363,17,337,339,341,17,17,358,17,17,361,365,367,17,17,17,17,17',
'370,234,17,18,18,17,373,18,18,374,18,234,234,377,363,129,234,234,363',
'378,385,363,387,234,388,396,363,18,18,129,401,129,409,129,18,129,18',
'411,18,18,418,18,18,18,422,18,18,425,234,430,431,18,18,432,438,18,129',
'447,18,18,448,450,451,59,59,454,18,59,457,458,464,465,18,470,473,474',
'18,18,485,18,18,486,488,495,18,18,18,18,18,497,499,18,19,19,18,505,19',
'19,,19,,,,59,131,,59,,,,,,,,,,19,19,131,,131,,131,19,131,19,59,19,19',
',19,19,19,,19,19,59,59,237,,19,19,,,19,131,,19,19,,,,237,,237,19,237',
',237,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,,237,19,20,20,19,,20,20',
',20,,,,,132,237,237,,,,,,237,,,,20,20,132,,132,,132,20,132,20,,20,20',
',20,20,20,,20,20,20,20,230,,20,20,,,20,132,,20,20,,,,230,,230,20,230',
',230,,,20,,,,20,20,,20,20,,,,20,20,20,20,20,,230,20,21,21,20,,21,21',
',21,,,,,,,,,,,,,,,,,21,21,,,,,,21,,21,,21,21,,21,21,21,,21,21,21,21',
',,21,21,,,21,,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21,,,,21,21,21,21',
'21,,,21,48,48,21,,48,48,,48,,,,,,,,,,,,,,,,,48,48,48,,,,,48,,48,,48',
'48,,48,48,48,,48,48,48,48,,,48,48,,,48,,,48,48,,,,218,218,,48,218,,',
',,48,,,,48,48,,48,48,,,,48,48,48,48,48,,,48,52,52,48,,52,52,,52,,,,218',
',,218,,,,,,,,,,52,52,,,,,,52,,52,218,52,52,,52,52,52,,52,52,218,218',
',,52,52,,,52,,,52,52,,,,303,303,,52,303,,,,,52,,,,52,52,,52,52,,,,52',
'52,52,52,52,,,52,53,53,52,,53,53,,53,,,,303,,,303,,,,,,,,,,53,53,,,',
',,53,,53,303,53,53,,53,53,53,,53,53,303,303,,,53,53,,,53,,,53,53,,,',
'398,398,,53,398,,,,,53,,,,53,53,,53,53,,,,53,53,53,53,53,,,53,54,54',
'53,,54,54,,54,,,,398,,,398,,,,,,,,,,54,54,,,,,,54,,54,398,54,54,,54',
'54,54,,54,54,398,398,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54,54',
',54,54,,,,54,54,54,54,54,,,54,66,66,54,,66,66,66,66,,,,,,,,,,,,,,,,',
'66,66,,,,,,66,,66,,66,66,,66,66,66,,66,66,66,66,,,66,66,,,66,,,66,66',
',,,,,,66,,,,,,66,,,,66,66,,66,66,,,,66,66,66,66,66,66,66,66,67,67,66',
',67,67,67,67,,,,,,,,,,,,,,,,,67,67,,,,,,67,,67,,67,67,,67,67,67,,67',
'67,67,67,,,67,67,,,67,,,67,67,,,,,,,67,,,,,,67,,,,67,67,,67,67,,,,67',
'67,67,67,67,67,67,67,68,68,67,,68,68,,68,68,,,,,,,,,,,,,,,,68,68,,,',
',,68,,68,,68,68,,68,68,68,,68,68,68,68,,,68,68,,,68,,,68,68,,,,,,,68',
',,,,,68,,,,68,68,,68,68,,,,68,68,68,68,68,68,68,68,73,73,68,,73,73,',
'73,,,,,,,,,,,,,,,,,73,73,,,,,,73,,73,,73,73,,73,73,73,,73,73,73,73,',
',73,73,,,73,,,73,73,,,,,,,73,,,,,,73,,,,73,73,,73,73,,,,73,73,73,73',
'73,,,73,78,78,73,,78,78,,78,,,,,,,,,,,,,,,,,78,78,,,,,,78,,78,,78,78',
',78,78,78,,78,78,,,,,78,78,,,78,,,78,78,,,,,,,78,,,,,,78,,,,78,78,,78',
'78,,,,78,78,78,78,78,,,78,81,81,78,,81,81,,81,,,,,,,,,,,,,,,,,81,81',
',,,,,81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,',
',81,,,,,,81,,,,81,81,,81,81,,,,81,81,81,81,81,,,81,83,83,81,,83,83,',
'83,,,,,,,,,,,,,,,,,83,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,83,83,',
',83,83,,,83,,,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83,83',
'83,,,83,84,84,83,,84,84,,84,,,,,,,,,,,,,,,,,84,84,,,,,,84,,84,,84,84',
',84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84',
',84,84,,,,84,84,84,84,84,,,84,85,85,84,,85,85,,85,,,,,,,,,,,,,,,,,85',
'85,,,,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,',
',,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,,,85,86,86,85,,86,86',
',86,,,,,,,,,,,,,,,,,86,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,86,86',
',,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86,86',
'86,,,86,87,87,86,,87,87,,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87,87',
',87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87',
',87,87,,,,87,87,87,87,87,,,87,88,88,87,,88,88,,88,,,,,,,,,,,,,,,,,88',
'88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88,,',
',,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,,,88,89,89,88,,89,89',
',89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89,89,,89,89,89,,89,89,89,89',
',,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89,89',
'89,,,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90',
',90,90,90,,90,90,90,90,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90',
',90,90,,,,90,90,90,90,90,,,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91',
'91,,,,,,91,91,91,91,91,91,91,91,91,91,,91,91,,,,,91,91,91,91,91,,,91',
'91,,,,,,,91,,,,,91,91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,91,92',
'92,91,,92,92,,92,,,,,,,,,,,,,,,,,92,92,,,,,,92,,92,,92,92,,92,92,92',
',92,92,,,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92',
'92,92,92,92,,,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,',
'93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,',
',,93,93,,93,93,,,,93,93,93,93,93,,,93,94,94,93,,94,94,,94,,,,,,,,,,',
',,,,,,94,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94',
'94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,,,94,95,95,94',
',95,95,,95,,,,,,,,,,,,,,,,,95,95,,,,,,95,,95,,95,95,,95,95,95,,95,95',
',,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95',
'95,95,,,95,96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96',
'96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96',
',96,96,,,,96,96,96,96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97',
'97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,',
'97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,,,97,98,98,97,,98,98,,98',
',,,,,,,,,,,,,,,,98,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98',
',,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,,,98',
'99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,99,,,,,,99,,99,,99,99,,99,99',
'99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,',
',99,99,99,99,99,,,99,100,100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,100',
',,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100',
'100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100,100,100,100,,',
'100,101,101,100,,101,101,,101,,,,,,,,,,,,,,,,,101,101,,,,,,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,,,101',
',,,,,101,,,,101,101,,101,101,,,,101,101,101,101,101,,,101,102,102,101',
',102,102,,102,,,,,,,,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102',
'102,,102,102,,,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102',
',102,102,,,,102,102,102,102,102,,,102,103,103,102,,103,103,,103,,,,',
',,,,,,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,',
',103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103',
'103,103,103,103,,,103,104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104',
'104,,,,,,104,,104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,',
',104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104',
',,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,105,,,,,,105,,105',
',105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105',
',,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105,,,105,106,106,105',
',106,106,,106,,,,,,,,,,,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106',
'106,,106,106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106',
',106,106,,,,106,106,106,106,106,,,106,107,107,106,,107,107,,107,,,,',
',,,,,,,,,,,,107,107,,,,,,107,,107,,107,107,,107,107,107,,107,107,,,',
',107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107',
'107,107,107,107,,,107,108,108,107,,108,108,,108,,,,,,,,,,,,,,,,,108',
'108,,,,,,108,,108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108,',
',108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,,,,108,108,108,108,108',
',,108,109,109,108,,109,109,,109,,,,,,,,,,,,,,,,,109,109,,,,,,109,,109',
',109,109,,109,109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109',
',,,,,109,,,,109,109,,109,109,,,,109,109,109,109,109,,,109,110,110,109',
',110,110,,110,,,,,,,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110',
'110,,110,110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,110,110',
'110,,110,110,,,,110,110,110,110,110,,,110,111,111,110,,111,111,,111',
',,,,,,,,,,,,,,,,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111',
',,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,',
',,111,111,111,111,111,,,111,115,115,111,,115,115,,115,,,,,,,,,,,,,,',
',,115,115,,,,,,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115,',
',115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,,,,115,115,115',
'115,115,,,115,116,116,115,,116,116,,116,,,,,,,,,,,,,,,,,116,116,,,,',
',116,,116,,116,116,,116,116,116,,116,116,,,,,116,116,,,116,,,116,116',
',,,,,,116,,,,,,116,,,,116,116,,116,116,,,,116,116,116,116,116,,,116',
'119,119,116,,119,119,,119,,,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119',
'119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,',
',119,,,,119,119,,119,119,,,,119,119,119,119,119,,,119,145,145,119,,145',
'145,,145,,,,,,,,,,,,,,,,,145,145,145,,,,,145,,145,,145,145,,145,145',
'145,,145,145,145,145,,,145,145,,,145,,,145,145,,,,,,,145,,,,,,145,,',
',145,145,,145,145,,,,145,145,145,145,145,,,145,153,153,145,,153,153',
',153,153,,,,,,,,,,,,,,,,153,153,,,,,,153,,153,,153,153,,153,153,153',
',153,153,153,153,,,153,153,,,153,,,153,153,,,,,,,153,,,,,,153,,,,153',
'153,,153,153,,,,153,153,153,153,153,,,153,187,187,153,,187,187,,187',
',,,,,,,,,,,,,,,,187,187,,,,,,187,,187,,187,187,,187,187,187,,187,187',
'187,187,,,187,187,,,187,,,187,187,,,,,,,187,,,,,,187,,,,187,187,,187',
'187,,,,187,187,187,187,187,,,187,190,190,187,,190,190,,190,190,,,,,',
',,,,,,,,,,190,190,,,,,,190,,190,,190,190,,190,190,190,,190,190,190,190',
',,190,190,,,190,,,190,190,,,,,,,190,,,,,,190,,,,190,190,,190,190,,,',
'190,190,190,190,190,190,190,190,203,203,190,,203,203,,203,,,203,,,,',
',,,,,,,,,203,203,,,,,,203,,203,,203,203,,203,203,203,,203,203,,,,,203',
'203,,,203,,,203,203,,,,,,,203,,,,,,203,,,,203,203,,203,203,,,,203,203',
'203,203,203,,,203,208,208,203,,208,208,,208,,,,,,,,,,,,,,,,,208,208',
',,,,,208,,208,,208,208,,208,208,208,,208,208,,,,,208,208,,,208,,,208',
'208,,,,,,,208,,,,,,208,,,,208,208,,208,208,,,,208,208,208,208,208,,',
'208,209,209,208,,209,209,,209,,,,,,,,,,,,,,,,,209,209,,,,,,209,,209',
',209,209,,209,209,209,,209,209,,,,,209,209,,,209,,,209,209,,,,,,,209',
',,,,,209,,,,209,209,,209,209,,,,209,209,209,209,209,,,209,210,210,209',
',210,210,,210,,,,,,,,,,,,,,,,,210,210,,,,,,210,,210,,210,210,,210,210',
'210,,210,210,,,,,210,210,,,210,,,210,210,,,,,,,210,,,,,,210,,,,210,210',
',210,210,,,,210,210,210,210,210,,,210,251,251,210,,251,251,,251,,,,',
',,,,,,,,,,,,251,251,,,,,,251,,251,,251,251,,251,251,251,,251,251,,,',
',251,251,,,251,,,251,251,,,,,,,251,,,,,,251,,,,251,251,,251,251,,,,251',
'251,251,251,251,,,251,271,271,251,,271,271,,271,,,,,,,,,,,,,,,,,271',
'271,,,,,,271,,271,,271,271,,271,271,271,,271,271,271,271,,,271,271,',
',271,,,271,271,,,,,,,271,,,,,,271,,,,271,271,,271,271,,,,271,271,271',
'271,271,,,271,274,274,271,,274,274,,274,,,,,,,,,,,,,,,,,274,274,,,,',
',274,,274,,274,274,,274,274,274,,274,274,,,,,274,274,,,274,,,274,274',
',,,,,,274,,,,,,274,,,,274,274,,274,274,,,,274,274,274,274,274,,,274',
'275,275,274,,275,275,,275,,,,,,,,,,,,,,,,,275,275,,,,,,275,,275,,275',
'275,,275,275,275,,275,275,,,,,275,275,,,275,,,275,275,,,,,,,275,,,,',
',275,,,,275,275,,275,275,,,,275,275,275,275,275,,,275,276,276,275,,276',
'276,,276,,,,,,,,,,,,,,,,,276,276,,,,,,276,,276,,276,276,,276,276,276',
',276,276,276,276,,,276,276,,,276,,,276,276,,,,,,,276,,,,,,276,,,,276',
'276,,276,276,,,,276,276,276,276,276,,,276,294,294,276,,294,294,,294',
'294,,,,,,,,,,,,,,,,294,294,,,,,,294,,294,,294,294,,294,294,294,,294',
'294,294,294,,,294,294,,,294,,,294,294,,,,,,,294,,,,,,294,,,,294,294',
',294,294,,,,294,294,294,294,294,,,294,295,295,294,,295,295,,295,295',
',,,,,,,,,,,,,,,295,295,,,,,,295,,295,,295,295,,295,295,295,,295,295',
'295,295,,,295,295,,,295,,,295,295,,,,,,,295,,,,,,295,,,,295,295,,295',
'295,,,,295,295,295,295,295,,,295,296,296,295,,296,296,,296,,,,,,,,,',
',,,,,,,296,296,,,,,,296,,296,,296,296,,296,296,296,,296,296,,,,,296',
'296,,,296,,,296,296,,,,,,,296,,,,,,296,,,,296,296,,296,296,,,,296,296',
'296,296,296,,,296,307,307,296,,307,307,,307,,,,,,,,,,,,,,,,,307,307',
',,,,,307,,307,,307,307,,307,307,307,,307,307,307,307,,,307,307,,,307',
',,307,307,,,,,,,307,,,,,,307,,,,307,307,,307,307,,,,307,307,307,307',
'307,307,307,307,310,310,307,,310,310,,310,310,,,,,,,,,,,,,,,,310,310',
',,,,,310,,310,,310,310,,310,310,310,,310,310,310,310,,,310,310,,,310',
',,310,310,,,,,,,310,,,,,,310,,,,310,310,,310,310,,,,310,310,310,310',
'310,310,310,310,311,311,310,,311,311,,311,,,,,,,,,,,,,,,,,311,311,,',
',,,311,,311,,311,311,,311,311,311,,311,311,311,311,,,311,311,,,311,',
',311,311,,,,,,,311,,,,,,311,,,,311,311,,311,311,,,,311,311,311,311,311',
'311,311,311,316,316,311,,316,316,,316,,,,,,,,,,,,,,,,,316,316,,,,,,316',
',316,,316,316,,316,316,316,,316,316,316,316,,,316,316,,,316,,,316,316',
',,,,,,316,,,,,,316,,,,316,316,,316,316,,,,316,316,316,316,316,,,316',
'331,331,316,,331,331,,331,,,,,,,,,,,,,,,,,331,331,,,,,,331,,331,,331',
'331,,331,331,331,,331,331,,,,,331,331,,,331,,,331,331,,,,,,,331,,,,',
',331,,,,331,331,,331,331,,,,331,331,331,331,331,,,331,332,332,331,,332',
'332,,332,,,,,,,,,,,,,,,,,332,332,,,,,,332,,332,,332,332,,332,332,332',
',332,332,,,,,332,332,,,332,,,332,332,,,,,,,332,,,,,,332,,,,332,332,',
'332,332,,,,332,332,332,332,332,,,332,333,333,332,,333,333,,333,,,,,',
',,,,,,,,,,,333,333,,,,,,333,,333,,333,333,,333,333,333,,333,333,,,,',
'333,333,,,333,,,333,333,,,,,,,333,,,,,,333,,,,333,333,,333,333,,,,333',
'333,333,333,333,,,333,334,334,333,,334,334,,334,,,,,,,,,,,,,,,,,334',
'334,,,,,,334,,334,,334,334,,334,334,334,,334,334,,,,,334,334,,,334,',
',334,334,,,,,,,334,,,,,,334,,,,334,334,,334,334,,,,334,334,334,334,334',
',,334,338,338,334,,338,338,,338,,,,,,,,,,,,,,,,,338,338,,,,,,338,,338',
',338,338,,338,338,338,,338,338,,,,,338,338,,,338,,,338,338,,,,,,,338',
',,,,,338,,,,338,338,,338,338,,,,338,338,338,338,338,,,338,359,359,338',
',359,359,,359,,,,,,,,,,,,,,,,,359,359,,,,,,359,,359,,359,359,,359,359',
'359,,359,359,,,,,359,359,,,359,,,359,359,,,,,,,359,,,,,,359,,,,359,359',
',359,359,,,,359,359,359,359,359,,,359,376,376,359,,376,376,,376,376',
',,,,,,,,,,,,,,,376,376,,,,,,376,,376,,376,376,,376,376,376,,376,376',
'376,376,,,376,376,,,376,,,376,376,,,,,,,376,,,,,,376,,,,376,376,,376',
'376,,,,376,376,376,376,376,,,376,380,380,376,,380,380,,380,,,,,,,,,',
',,,,,,,380,380,,,,,,380,,380,,380,380,,380,380,380,,380,380,,,,,380',
'380,,,380,,,380,380,,,,,,,380,,,,,,380,,,,380,380,,380,380,,,,380,380',
'380,380,380,,,380,383,383,380,,383,383,,383,,,,,,,,,,,,,,,,,383,383',
',,,,,383,,383,,383,383,,383,383,383,,383,383,383,383,,,383,383,,,383',
',,383,383,,,,,,,383,,,,,,383,,,,383,383,,383,383,,,,383,383,383,383',
'383,,,383,390,390,383,,390,390,,390,390,,,,,,,,,,,,,,,,390,390,,,,,',
'390,,390,,390,390,,390,390,390,,390,390,,,,,390,390,,,390,,,390,390',
',,,,,,390,,,,,,390,,,,390,390,,390,390,,,,390,390,390,390,390,,,390',
'392,392,390,,392,392,,392,,,,,,,,,,,,,,,,,392,392,,,,,,392,,392,,392',
'392,,392,392,392,,392,392,392,392,,,392,392,,,392,,,392,392,,,,,,,392',
',,,,,392,,,,392,392,,392,392,,,,392,392,392,392,392,,,392,393,393,392',
',393,393,,393,,,,,,,,,,,,,,,,,393,393,,,,,,393,,393,,393,393,,393,393',
'393,,393,393,393,393,,,393,393,,,393,,,393,393,,,,,,,393,,,,,,393,,',
',393,393,,393,393,,,,393,393,393,393,393,,,393,419,419,393,,419,419',
',419,,,,,,,,,,,,,,,,,419,419,,,,,,419,,419,,419,419,,419,419,419,,419',
'419,,,,,419,419,,,419,,,419,419,,,,,,,419,,,,,,419,,,,419,419,,419,419',
',,,419,419,419,419,419,,,419,426,426,419,,426,426,,426,,,,,,,,,,,,,',
',,,426,426,,,,,,426,,426,,426,426,,426,426,426,,426,426,426,426,,,426',
'426,,,426,,,426,426,,,,,,,426,,,,,,426,,,,426,426,,426,426,,,,426,426',
'426,426,426,,,426,434,434,426,,434,434,,434,,,,,,,,,,,,,,,,,434,434',
',,,,,434,,434,,434,434,,434,434,434,,434,434,,,,,434,434,,,434,,,434',
'434,,,,,,,434,,,,,,434,,,,434,434,,434,434,,,,434,434,434,434,434,,',
'434,437,437,434,,437,437,,437,,,,,,,,,,,,,,,,,437,437,,,,,,437,,437',
',437,437,,437,437,437,,437,437,437,437,,,437,437,,,437,,,437,437,,,',
',,,437,,,,,,437,,,,437,437,,437,437,,,,437,437,437,437,437,,,437,440',
'440,437,,440,440,,440,,,,,,,,,,,,,,,,,440,440,,,,,,440,,440,,440,440',
',440,440,440,,440,440,,,,,440,440,,,440,,,440,440,,,,,,,440,,,,,,440',
',,,440,440,,440,440,,,,440,440,440,440,440,,,440,446,446,440,,446,446',
',446,,,,,,,,,,,,,,,,,446,446,,,,,,446,,446,,446,446,,446,446,446,,446',
'446,,,,,446,446,,,446,,,446,446,,,,,,,446,,,,,,446,,,,446,446,,446,446',
',,,446,446,446,446,446,,,446,459,459,446,,459,459,,459,459,,,,,,,,,',
',,,,,,459,459,,,,,,459,,459,,459,459,,459,459,459,,459,459,459,459,',
',459,459,,,459,,,459,459,,,,,,,459,,,,,,459,,,,459,459,,459,459,,,,459',
'459,459,459,459,,,459,461,461,459,,461,461,,461,,,,,,,,,,,,,,,,,461',
'461,,,,,,461,,461,,461,461,,461,461,461,,461,461,461,461,,,461,461,',
',461,,,461,461,,,,,,,461,,,,,,461,,,,461,461,,461,461,,,,461,461,461',
'461,461,,,461,479,479,461,,479,479,,479,479,,,,,,,,,,,,,,,,479,479,',
',,,,479,,479,,479,479,,479,479,479,,479,479,479,479,,,479,479,,,479',
',,479,479,,,,,,,479,,,,,,479,,,,479,479,,479,479,,,,479,479,479,479',
'479,,,479,481,481,479,,481,481,,481,481,,,,,,,,,,,,,,,,481,481,,,,,',
'481,,481,,481,481,,481,481,481,,481,481,481,481,,,481,481,,,481,,,481',
'481,,,,,,,481,,,,,,481,,,,481,481,,481,481,,,,481,481,481,481,481,,',
'481,482,482,481,,482,482,,482,,,,,,,,,,,,,,,,,482,482,,,,,,482,,482',
',482,482,,482,482,482,,482,482,482,482,,,482,482,,,482,,,482,482,,,',
',,,482,,,,,,482,,,,482,482,,482,482,,,,482,482,482,482,482,,,482,490',
'490,482,,490,490,,490,,,,,,,,,,,,,,,,,490,490,,,,,,490,,490,,490,490',
',490,490,490,,490,490,,,,,490,490,,,490,,,490,490,,,,,,,490,,,,,,490',
',,,490,490,,490,490,,,9,490,490,490,490,490,,,490,,,490,9,9,9,,9,,9',
',9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,146,,146,,,9',
',,,,,,146,146,146,,146,,146,,146,,146,146,146,146,,,,,9,,,,,,,,,,,146',
',,,146,146,,,146,146,146,146,146,146,,146,146,148,,148,,,146,,,,,,,148',
'148,148,,148,,148,,148,,148,148,148,148,,,,,146,,,,,,,,,,,148,,,,148',
'148,,,148,148,148,148,148,148,,148,148,149,,149,,,148,,,,,,,149,149',
'149,,149,,149,,149,,149,149,149,149,,,,,148,,,,,,,,,,,149,,,,149,149',
',189,149,149,149,149,149,149,,149,149,,,189,189,189,149,189,,189,,189',
',189,189,189,189,,,,,,,,,,,,,,,149,189,,,,189,189,,,189,189,189,189',
'189,189,,189,189,,,,,,189,,,,201,,,,,,,189,189,,,,201,201,201,201,201',
'238,201,,201,189,201,201,201,201,,,,,,238,,238,,238,,238,,,,201,,,,201',
'201,,,201,201,201,201,201,201,,201,201,238,,,239,,201,,,238,238,238',
'238,,,,238,238,239,,239,240,239,238,239,,,,,,,201,,,,240,,240,,240,',
'240,,,,239,,,238,,,,,239,239,239,239,,,,239,239,240,,,241,,239,,,240',
'240,240,240,240,240,,240,240,241,,241,242,241,240,241,,,,,,,239,,,242',
'242,,242,,242,,242,,242,,241,,,240,,,,,241,241,241,241,241,241,,241',
'241,242,,,,,241,,243,242,242,242,242,242,242,,242,242,,,,243,243,242',
'243,244,243,,243,,243,241,,,,,,,244,244,,244,,244,,244,,244,242,243',
',,,,,,,243,243,243,243,243,243,,243,243,244,,,,,243,,245,244,244,244',
'244,244,244,,244,244,,,,245,245,244,245,,245,,245,,245,243,,,,,,,,,',
',,,,,,,244,245,,,,,246,,,245,245,245,245,245,245,,245,245,246,246,246',
',246,245,246,,246,,246,246,246,246,,,,,,,,,,,,,,,,246,245,,,,247,,,246',
'246,246,246,246,246,,246,246,247,247,247,,247,246,247,,247,,247,247',
'247,247,,,,,,,,,,,,,,,,247,246,,,,247,,,247,247,247,247,247,247,248',
'247,247,,,248,,,247,,,,248,248,248,,248,,248,,248,,248,248,248,248,',
',,,,,,247,,,,,,,,248,,,,248,248,,252,248,248,248,248,248,248,,248,248',
',,252,252,252,248,252,,252,,252,,252,252,252,252,,,,,,,,,,,,,,,248,252',
',,,252,252,,257,252,252,252,252,252,252,,252,252,,,257,257,257,252,257',
',257,,257,,257,257,257,257,,,,,,,,,,,,,,,252,257,,,,257,257,,,257,257',
'257,257,257,257,262,257,257,,,,,,257,,,,262,262,262,262,262,,262,,262',
',262,262,262,262,,,,,,,,257,,,,,,,,262,,,,262,262,,372,262,262,262,262',
'262,262,,262,262,,,372,372,372,262,372,,372,,372,,372,372,372,372,,',
',,,,,,,,,,,,262,372,,,,372,372,,414,372,372,372,372,372,372,,372,372',
',,414,414,414,372,414,,414,,414,,414,414,414,414,,,,,,,,,,,,,,,372,414',
',,,414,414,,415,414,414,414,414,414,414,,414,414,,,415,415,415,414,415',
',415,,415,,415,415,415,415,,,,,,,,,,,,,,,414,415,,,,415,415,,416,415',
'415,415,415,415,415,,415,415,,,416,416,416,415,416,,416,,416,,416,416',
'416,416,,,,,,,,,,,,,,,415,416,,,,416,416,,417,416,416,416,416,416,416',
',416,416,,,417,417,417,416,417,,417,,417,,417,417,417,417,,,,,,,,,,',
',,,,416,417,,,,417,417,,421,417,417,417,417,417,417,,417,417,,,421,421',
'421,417,421,,421,,421,,421,421,421,421,,,,,,,,,,,,,,,417,421,,,,421',
'421,,443,421,421,421,421,421,421,,421,421,,,443,443,443,421,443,,443',
',443,,443,443,443,443,,,,,,,,,,,,,,,421,443,,,,443,443,,,443,443,443',
'443,443,443,,443,443,,256,256,256,256,443,256,256,256,,256,,256,256',
',,,,,,256,256,256,,,,256,,,,443,,,,,,,,256,256,,,,,,,,,,,,256,256,256',
'256,256,256,256,256,328,328,328,328,,328,328,328,,328,,328,328,,,,,',
',328,328,328,,,,328,,,,,,,,,,,,328,328,,,,,,,,,,,,328,328,328,328,328',
'328,328,328,330,330,330,330,,330,330,330,,330,,330,330,,,,,,,330,330',
'330,,,,330,,,,,,,,,,,,330,330,,,,,,,,,,,,330,330,330,330,330,330,330',
'330,360,360,360,360,,360,360,360,,360,,360,360,,,,,,,360,360,360,,,',
'360,,,,,,,,,,,,360,360,,,,,,,,,,,,360,360,360,360,360,360,360,360,368',
'368,368,368,,368,368,368,,368,,368,368,,,,,,,368,368,368,,,,368,,,,',
',,,,,,,368,368,,,,,,,,,,,,368,368,368,368,368,368,368,368,394,394,394',
'394,,394,394,394,,394,,394,394,,,,,,,394,394,394,,,,394,,,,,,,,,,,,394',
'394,,,,,,,,,,,,394,394,394,394,394,394,394,394' ]
        racc_action_check = arr = ::Array.new(10028, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,     6,   nil,   nil,    87,     6,   nil,    -8,    38,  8439,
   176,   265,    12,   nil,   nil,   nil,   168,   354,   443,   532,
   621,   710,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   187,   799,   109,
   -21,    44,   888,   977,  1066,    60,    61,   195,   134,   503,
    62,   205,   207,   nil,   nil,   nil,  1155,  1244,  1333,   nil,
   nil,   nil,   nil,  1422,   nil,    70,    78,   nil,  1511,   nil,
   154,  1600,   147,  1689,  1778,  1867,  1956,  2045,  2134,  2223,
  2312,  2401,  2490,  2579,  2668,  2757,  2846,  2935,  3024,  3113,
  3202,  3291,  3380,  3469,  3558,  3647,  3736,  3825,  3914,  4003,
  4092,  4181,   nil,    55,   172,  4270,  4359,   178,   181,  4448,
   291,   nil,   nil,   nil,   nil,   nil,   162,   nil,   nil,   450,
   193,   539,   628,   167,   180,   nil,   206,   153,   nil,   222,
   216,     2,   nil,   184,   -35,  4537,  8497,   nil,  8555,  8613,
   299,   311,   240,  4626,   236,   nil,   237,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   319,   119,   247,   255,   282,   257,
   nil,   nil,   nil,   nil,   nil,   nil,   260,   nil,    96,   nil,
   nil,   265,   nil,   368,   nil,   nil,    14,  4715,    68,  8661,
  4804,   nil,   266,   nil,   nil,   nil,   nil,   277,   290,   292,
   295,  8728,   295,  4893,     2,    10,    -9,   157,  4982,  5071,
  5160,   nil,   nil,    15,   329,   336,   155,   305,   859,   371,
    17,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   662,     5,    94,   306,   395,   128,   217,   573,  8745,  8789,
  8806,  8850,  8867,  8915,  8932,  8980,  9026,  9072,  9127,   nil,
   nil,  5249,  9175,   308,   nil,   nil,  9647,  9223,   279,   nil,
   310,   296,  9278,   nil,   308,   nil,    58,   178,   344,   nil,
   nil,  5338,   331,   nil,  5427,  5516,  5605,   312,   357,   318,
   nil,   nil,   362,   nil,   nil,   nil,   nil,   nil,   368,   348,
   -24,   nil,   173,   nil,  5694,  5783,  5872,   379,   381,   384,
   387,   nil,   361,   948,    81,   342,   398,  5961,   399,   nil,
  6050,  6139,   nil,   nil,   nil,   nil,  6228,   nil,   nil,   nil,
   nil,   397,   nil,   nil,   nil,   nil,   402,   405,  9705,   407,
  9763,  6317,  6406,  6495,  6584,   410,   nil,   418,  6673,   414,
   nil,   416,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   421,  6762,
  9821,   425,   nil,   418,   nil,   422,   nil,   423,  9879,   nil,
   370,    79,  9326,   438,   442,   nil,  6851,   448,   389,   138,
  6940,   nil,   nil,  7029,   nil,   452,   203,   454,   432,   135,
  7118,   nil,  7207,  7296,  9937,   nil,   458,   nil,  1037,   nil,
   nil,   463,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   402,
   301,   466,   nil,   nil,  9374,  9422,  9470,  9518,   472,  7385,
   nil,  9566,   476,   nil,   nil,   476,  7474,   nil,   nil,   nil,
   463,   464,   482,   nil,  7563,   nil,   nil,  7652,   486,   nil,
  7741,   nil,   nil,  9614,   214,   nil,  7830,   490,   468,   nil,
   494,   495,   nil,   nil,   497,   nil,   nil,   500,   498,  7919,
   nil,  8008,   nil,   nil,   502,   470,   nil,   nil,   nil,   nil,
   505,   nil,   nil,   506,   507,   nil,   181,   nil,   nil,  8097,
   nil,  8186,  8275,   nil,   nil,   510,   513,   nil,   514,   nil,
  8364,   nil,   nil,   nil,   nil,   515,   nil,   521,   nil,   522,
   nil,   nil,   nil,   nil,   nil,   494,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -282,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -282,  -282,  -182,   -33,   -34,   -35,   -36,  -282,  -282,  -282,
  -282,  -282,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,  -282,  -282,
   -96,  -100,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
  -282,  -230,  -253,  -203,  -204,  -205,  -282,  -282,  -282,  -226,
  -227,  -228,  -229,  -282,  -232,  -282,  -245,  -248,  -282,  -254,
  -282,  -282,    -7,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
  -282,  -137,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
  -282,  -282,   -94,  -282,  -132,  -281,  -281,   -22,   -23,  -282,
  -281,  -152,  -179,  -180,  -181,  -182,  -282,  -149,  -150,   -47,
  -182,   -48,   -55,  -282,  -282,   -14,  -255,   -91,   -95,  -198,
  -282,  -253,   -97,  -281,  -282,  -282,  -282,  -108,  -282,  -282,
  -281,  -281,  -282,  -282,  -255,  -163,  -165,  -166,  -167,  -168,
  -169,  -171,  -172,  -230,  -281,  -220,  -222,  -225,  -221,  -255,
  -207,  -216,  -217,  -218,  -223,  -224,  -255,  -209,  -282,  -212,
  -213,  -282,  -231,  -282,  -236,  -239,  -282,  -243,  -282,  -282,
  -282,   510,    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,
   -20,  -282,  -255,  -282,   -87,   -88,   -89,  -273,  -266,  -272,
  -260,  -138,  -141,  -282,  -263,  -277,  -182,  -280,  -269,  -275,
  -204,  -205,  -259,  -264,  -265,  -267,  -268,  -270,  -278,  -279,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,  -282,   -58,
  -126,  -282,   -62,  -255,  -101,  -102,  -137,  -136,  -282,  -135,
  -282,  -257,  -282,   -28,  -281,  -183,  -282,  -282,  -282,   -59,
   -60,  -256,  -282,   -93,  -282,  -282,  -243,  -282,  -282,  -282,
  -178,  -106,  -255,  -188,  -190,  -191,  -192,  -193,  -195,  -282,
  -282,  -253,  -282,   -99,  -282,  -282,  -282,  -282,  -282,  -282,
  -282,  -160,  -281,  -256,  -282,  -281,  -282,  -256,  -282,  -210,
  -282,  -282,  -233,  -234,  -235,  -237,  -282,  -240,  -241,  -242,
  -244,  -255,  -246,  -249,  -251,  -252,    -8,  -282,  -137,  -282,
  -256,  -282,  -282,  -282,  -282,  -255,  -128,  -282,  -256,  -255,
  -140,  -282,  -260,  -261,  -262,  -263,  -266,  -269,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -280,  -133,  -134,  -282,  -258,
  -137,  -282,  -155,  -282,  -184,  -255,  -185,  -255,  -137,   -15,
   -90,  -282,  -200,  -282,  -282,  -103,  -282,  -176,  -282,  -256,
  -282,  -196,  -197,  -282,   -98,  -282,  -111,  -282,  -117,  -282,
  -282,  -121,  -281,  -281,  -137,  -159,  -282,  -173,  -282,  -164,
  -170,  -282,  -206,  -219,  -208,  -211,  -214,  -215,  -238,  -282,
  -282,  -255,   -26,  -139,  -144,  -142,  -143,  -130,  -282,  -256,
   -61,   -63,  -282,   -25,   -29,  -255,  -281,  -156,  -157,  -158,
  -282,  -282,  -255,   -92,  -282,  -199,  -201,  -243,  -282,  -105,
  -282,  -107,  -189,  -194,  -111,  -110,  -282,  -282,  -117,  -116,
  -282,  -282,  -120,  -122,  -282,  -153,  -154,  -282,  -255,  -282,
  -174,  -281,  -247,  -250,  -282,   -30,  -127,  -129,  -131,   -27,
  -282,  -186,  -187,  -282,  -282,  -104,  -282,  -109,  -112,  -282,
  -115,  -282,  -281,  -145,  -146,  -282,  -282,  -162,  -282,   -24,
   -31,  -151,  -148,  -202,  -177,  -282,  -114,  -282,  -119,  -282,
  -124,  -125,  -147,  -161,  -175,  -257,  -113,  -118,  -123,   -32 ]

racc_goto_table = [
     2,   261,   129,   131,   132,   250,   133,   134,   159,   253,
   157,   142,   121,   259,   259,   182,   139,   319,   358,   323,
   173,   173,   278,   140,   136,   399,    82,   126,   391,   258,
   260,   202,   169,   176,   135,   117,   118,   146,   148,   149,
     1,   280,   449,     3,   464,   424,   249,   445,   375,   478,
   390,   499,   171,   171,   171,   150,   151,   335,   413,   184,
   164,   361,   427,   189,   396,   400,   442,   382,   152,   193,
   194,   195,   196,   454,   457,   381,   201,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   252,   264,   273,   282,
   257,   257,   480,   192,   262,   477,   373,   470,   406,   317,
   318,   139,   197,   198,   199,   200,   315,   316,   314,   185,
   460,   292,   453,   187,   nil,   nil,   268,   297,   298,   nil,
   121,   135,   139,   nil,   nil,   nil,   nil,   nil,   nil,   140,
   nil,   305,   488,   321,   nil,   nil,   336,   nil,   nil,   nil,
   nil,   nil,   299,   300,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   362,   nil,   nil,   272,   151,   159,   164,   157,
   nil,   nil,   371,   nil,   139,   nil,   326,   nil,   nil,   nil,
   nil,   140,   nil,   302,   401,   nil,   nil,   320,   131,   nil,
   327,   nil,   nil,   146,   148,   149,   339,   nil,   306,   nil,
   397,   nil,   nil,   280,   nil,   308,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   150,   151,   121,   nil,   nil,   164,
   nil,   365,   367,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   329,   nil,   139,   139,   nil,   248,   nil,   nil,   nil,
   463,   nil,   nil,   nil,   nil,   nil,   377,   nil,   nil,   nil,
   nil,   nil,   159,   nil,   157,   nil,   nil,   369,   408,   252,
   372,   403,   509,   nil,   nil,   407,   nil,   474,   411,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   320,   nil,   nil,   nil,
   nil,   252,   337,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   456,   456,   nil,   171,   385,   387,   171,   171,   nil,   nil,
   425,   nil,   184,   nil,   nil,   nil,   nil,   nil,   432,   nil,
   nil,   378,   nil,   nil,   467,   nil,   414,   415,   416,   417,
   nil,   nil,   nil,   421,   456,   nil,   nil,   nil,   nil,   nil,
   nil,   433,   nil,   nil,   458,   nil,   nil,   nil,   476,   nil,
   nil,   nil,   nil,   nil,   262,   nil,   139,   159,   nil,   157,
   409,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   456,
   nil,   nil,   nil,   428,   418,   443,   nil,   nil,   422,   369,
   nil,   nil,   505,   nil,   nil,   252,   438,   nil,   nil,   nil,
   500,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   430,   nil,   431,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   421,
   nil,   nil,   nil,   nil,   nil,   252,   nil,   nil,   nil,   nil,
   nil,   146,   nil,   nil,   nil,   nil,   nil,   320,   nil,   nil,
   465,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   469,   nil,   nil,   nil,   nil,   486,
   nil,   473,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   262,   nil,   nil,   nil,   495,
   nil,   497,   501,   nil,   nil,   nil,   nil,   485 ]

racc_goto_check = [
     2,    13,    10,    10,    10,    59,     6,     6,    41,    22,
    42,    45,    66,    58,    58,    94,    43,    84,    14,   101,
    88,    88,    49,    83,     8,    75,     5,    69,    56,    62,
    62,    11,    85,    85,     6,     9,     9,    10,    10,    10,
     1,    58,    54,     3,    12,    16,    21,    53,    50,    52,
    55,    57,     6,     6,     6,    66,    66,    60,    63,     6,
    66,    71,    72,    10,    74,    77,    78,    79,    69,     6,
     6,     6,     6,    68,    68,    81,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    67,    45,    51,
    10,    10,    54,     5,    10,    53,    84,    68,    87,    90,
    91,    43,     9,     9,     9,     9,    95,    96,    98,    99,
    75,     8,    56,   100,   nil,   nil,    66,    67,    67,   nil,
    66,     6,    43,   nil,   nil,   nil,   nil,   nil,   nil,    83,
   nil,    67,    68,    51,   nil,   nil,    59,   nil,   nil,   nil,
   nil,   nil,    66,     2,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,    58,   nil,   nil,    15,    66,    41,    66,    42,
   nil,   nil,    22,   nil,    43,   nil,     6,   nil,   nil,   nil,
   nil,    83,   nil,    15,    49,   nil,   nil,     2,    10,   nil,
     2,   nil,   nil,    10,    10,    10,    11,   nil,    15,   nil,
    58,   nil,   nil,    58,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    66,    66,    66,   nil,   nil,    66,
   nil,    51,    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,    43,    43,   nil,    10,   nil,   nil,   nil,
   101,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,
   nil,   nil,    41,   nil,    42,   nil,   nil,     6,    94,    10,
    10,    88,    14,   nil,   nil,    88,   nil,    84,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,    10,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,    58,   nil,     6,     2,     2,     6,     6,   nil,   nil,
    11,   nil,     6,   nil,   nil,   nil,   nil,   nil,    11,   nil,
   nil,    15,   nil,   nil,    59,   nil,    10,    10,    10,    10,
   nil,   nil,   nil,    10,    58,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,    11,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    10,   nil,    43,    41,   nil,    42,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,
   nil,   nil,   nil,    66,    15,    10,   nil,   nil,    15,     6,
   nil,   nil,    13,   nil,   nil,    10,     2,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,     2,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,     2,
   nil,     2,     2,   nil,   nil,   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,    40,     0,    43,   nil,    22,   -14,   nil,   -24,    25,
   -15,   -60,  -367,  -118,  -243,    29,  -314,   nil,   nil,   nil,
   nil,   -64,  -102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -51,   -49,   -33,   nil,   -39,   nil,   nil,   nil,  -121,
  -230,   -45,  -397,  -339,  -346,  -246,  -268,  -431,  -102,  -105,
  -194,   nil,   -86,  -272,   nil,   nil,     0,   -23,  -319,    11,
   nil,  -203,  -301,   nil,  -238,  -278,   nil,  -239,  -313,  -223,
   nil,  -214,   nil,   -26,  -170,   -34,   nil,  -202,   -46,   nil,
   -77,   -76,   nil,   nil,   -58,   -67,   -66,   nil,   -65,    44,
    47,  -170 ]

racc_goto_default = [
   nil,   nil,   455,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   263,    13,    14,    15,
    16,   nil,   389,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    48,   nil,    50,    51,   143,   nil,
   nil,   nil,   147,   nil,   nil,   nil,   nil,   nil,   265,   nil,
   nil,   114,   nil,   211,   213,   212,    57,   nil,   nil,   nil,
   120,   nil,   nil,   154,   nil,   155,   156,   160,   283,   284,
   285,   286,   287,   290,   nil,   nil,   178,   180,   181,   172,
    69,    70,    71,    73,   nil,   nil,   nil,   183,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 97, :_reduce_1,
  1, 97, :_reduce_2,
  0, 97, :_reduce_3,
  1, 98, :_reduce_4,
  1, 100, :_reduce_5,
  3, 100, :_reduce_6,
  2, 100, :_reduce_7,
  1, 101, :_reduce_8,
  3, 101, :_reduce_9,
  1, 102, :_reduce_none,
  3, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  1, 104, :_reduce_14,
  3, 104, :_reduce_15,
  1, 103, :_reduce_none,
  3, 103, :_reduce_17,
  3, 103, :_reduce_18,
  3, 103, :_reduce_19,
  3, 103, :_reduce_20,
  1, 105, :_reduce_none,
  2, 105, :_reduce_22,
  2, 105, :_reduce_23,
  7, 105, :_reduce_24,
  5, 105, :_reduce_25,
  5, 105, :_reduce_26,
  4, 112, :_reduce_27,
  1, 109, :_reduce_28,
  3, 109, :_reduce_29,
  1, 108, :_reduce_30,
  2, 108, :_reduce_31,
  4, 108, :_reduce_32,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_37,
  3, 106, :_reduce_38,
  3, 106, :_reduce_39,
  3, 106, :_reduce_40,
  3, 106, :_reduce_41,
  3, 106, :_reduce_42,
  3, 106, :_reduce_43,
  3, 106, :_reduce_44,
  3, 106, :_reduce_45,
  3, 106, :_reduce_46,
  2, 106, :_reduce_47,
  2, 106, :_reduce_48,
  3, 106, :_reduce_49,
  3, 106, :_reduce_50,
  3, 106, :_reduce_51,
  3, 106, :_reduce_52,
  3, 106, :_reduce_53,
  3, 106, :_reduce_54,
  2, 106, :_reduce_55,
  3, 106, :_reduce_56,
  3, 106, :_reduce_57,
  3, 106, :_reduce_58,
  3, 106, :_reduce_59,
  3, 106, :_reduce_60,
  5, 116, :_reduce_61,
  1, 118, :_reduce_62,
  3, 118, :_reduce_63,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_85,
  1, 113, :_reduce_86,
  1, 113, :_reduce_87,
  1, 113, :_reduce_88,
  1, 113, :_reduce_89,
  4, 115, :_reduce_90,
  2, 115, :_reduce_91,
  5, 115, :_reduce_92,
  3, 115, :_reduce_93,
  2, 140, :_reduce_94,
  2, 140, :_reduce_95,
  1, 120, :_reduce_96,
  2, 120, :_reduce_97,
  4, 142, :_reduce_98,
  3, 142, :_reduce_99,
  1, 142, :_reduce_100,
  3, 143, :_reduce_101,
  3, 143, :_reduce_102,
  3, 141, :_reduce_103,
  3, 146, :_reduce_104,
  2, 146, :_reduce_105,
  2, 144, :_reduce_106,
  4, 144, :_reduce_107,
  2, 123, :_reduce_108,
  5, 148, :_reduce_109,
  4, 148, :_reduce_110,
  0, 149, :_reduce_none,
  2, 149, :_reduce_112,
  4, 149, :_reduce_113,
  3, 149, :_reduce_114,
  6, 124, :_reduce_115,
  5, 124, :_reduce_116,
  0, 150, :_reduce_none,
  4, 150, :_reduce_118,
  3, 150, :_reduce_119,
  5, 122, :_reduce_120,
  1, 151, :_reduce_121,
  2, 151, :_reduce_122,
  5, 152, :_reduce_123,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 117, :_reduce_none,
  4, 117, :_reduce_127,
  1, 156, :_reduce_128,
  3, 156, :_reduce_129,
  3, 155, :_reduce_130,
  6, 121, :_reduce_131,
  2, 121, :_reduce_132,
  3, 157, :_reduce_133,
  3, 157, :_reduce_134,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 107, :_reduce_137,
  1, 107, :_reduce_138,
  3, 107, :_reduce_139,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 159, :_reduce_142,
  3, 159, :_reduce_143,
  3, 159, :_reduce_144,
  6, 125, :_reduce_145,
  6, 126, :_reduce_146,
  7, 114, :_reduce_147,
  7, 114, :_reduce_148,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  7, 127, :_reduce_151,
  1, 166, :_reduce_152,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 167, :_reduce_none,
  2, 167, :_reduce_156,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  4, 129, :_reduce_159,
  3, 129, :_reduce_160,
  7, 128, :_reduce_161,
  6, 128, :_reduce_162,
  1, 169, :_reduce_163,
  3, 169, :_reduce_164,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_167,
  1, 171, :_reduce_none,
  1, 172, :_reduce_169,
  3, 172, :_reduce_170,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_174,
  7, 131, :_reduce_175,
  2, 145, :_reduce_176,
  5, 145, :_reduce_177,
  1, 145, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_182,
  1, 163, :_reduce_183,
  2, 163, :_reduce_184,
  2, 163, :_reduce_185,
  4, 163, :_reduce_186,
  4, 163, :_reduce_187,
  1, 147, :_reduce_188,
  3, 147, :_reduce_189,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  3, 177, :_reduce_194,
  1, 177, :_reduce_195,
  2, 178, :_reduce_196,
  2, 176, :_reduce_197,
  1, 179, :_reduce_198,
  4, 179, :_reduce_199,
  4, 132, :_reduce_200,
  5, 133, :_reduce_201,
  7, 133, :_reduce_202,
  1, 119, :_reduce_203,
  1, 134, :_reduce_204,
  1, 134, :_reduce_205,
  4, 135, :_reduce_206,
  2, 135, :_reduce_207,
  4, 135, :_reduce_208,
  2, 135, :_reduce_209,
  3, 136, :_reduce_210,
  4, 136, :_reduce_211,
  2, 136, :_reduce_212,
  1, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 183, :_reduce_215,
  1, 184, :_reduce_none,
  1, 184, :_reduce_217,
  1, 181, :_reduce_218,
  3, 181, :_reduce_219,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 186, :_reduce_229,
  1, 186, :_reduce_230,
  2, 187, :_reduce_231,
  1, 189, :_reduce_232,
  1, 191, :_reduce_233,
  1, 192, :_reduce_234,
  2, 190, :_reduce_235,
  1, 193, :_reduce_236,
  1, 194, :_reduce_237,
  2, 194, :_reduce_238,
  2, 188, :_reduce_239,
  2, 195, :_reduce_240,
  2, 195, :_reduce_241,
  3, 99, :_reduce_242,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 196, :_reduce_245,
  2, 196, :_reduce_246,
  4, 196, :_reduce_247,
  1, 130, :_reduce_248,
  3, 130, :_reduce_249,
  5, 130, :_reduce_250,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 139, :_reduce_253,
  1, 137, :_reduce_254,
  0, 111, :_reduce_none,
  1, 111, :_reduce_256,
  0, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  0, 154, :_reduce_281 ]

racc_reduce_n = 282

racc_shift_n = 510

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :LOW => 91,
  :HIGH => 92,
  :LISTSTART => 93,
  :SPLAT => 94,
  :MODULO => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_59(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_60(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_61(val, _values, result)
     result = val[0].access(val[2])         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_85(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_86(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_95(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_97(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_101(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_103(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_104(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_105(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_106(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_108(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_109(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_112(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_113(val, _values, result)
            result = Factory.block_or_expression(val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_114(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_115(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_118(val, _values, result)
            result = Factory.block_or_expression(val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_119(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_120(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_122(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_123(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_127(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_129(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_130(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_131(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_133(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_134(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_137(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_138(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_139(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_142(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_143(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_144(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_145(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_146(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 519)
  def _reduce_147(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_148(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_151(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_152(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_159(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_160(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_161(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_162(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_163(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_167(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_169(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_170(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_175(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_176(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_177(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_182(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_183(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_184(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_185(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_186(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_187(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_188(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_189(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_194(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_195(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_196(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_197(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_198(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_199(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_200(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[1], val[3])
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_201(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_202(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_203(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_204(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_205(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 739)
  def _reduce_206(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_207(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_208(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_209(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_210(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_211(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_212(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 750)
  def _reduce_213(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_214(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 754)
  def _reduce_215(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'egrammar.ra', 758)
  def _reduce_217(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 761)
  def _reduce_218(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 762)
  def _reduce_219(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_230(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_231(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 783)
  def _reduce_232(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 784)
  def _reduce_233(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 785)
  def _reduce_234(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_235(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_236(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_237(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_238(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 794)
  def _reduce_239(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 797)
  def _reduce_240(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_241(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 801)
  def _reduce_242(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_245(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 809)
  def _reduce_246(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 810)
  def _reduce_247(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 813)
  def _reduce_248(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 814)
  def _reduce_249(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 815)
  def _reduce_250(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

module_eval(<<'.,.,', 'egrammar.ra', 821)
  def _reduce_253(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 824)
  def _reduce_254(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 255 omitted

module_eval(<<'.,.,', 'egrammar.ra', 830)
  def _reduce_256(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

module_eval(<<'.,.,', 'egrammar.ra', 861)
  def _reduce_281(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
