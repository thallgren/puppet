
Examples(`AccessExpression`,
  Example('one argument',
    Given(`$var['one']`),
    Parses_to(`(access (var "var") "one")`)),

  Example('several arguments',
    Given(`Variant[String[1,10],Integer,Float]`),
    Parses_to(`(access (qr "Variant") (access (qr "String") 1 10) (qr "Integer") (qr "Float"))'`)),
)

Example(`ApplicationExpression`,
  Given(`application lamp($x) {}`),
  Parses_to(`(application {:name "lamp" :params {:x {}}})`))

Examples(`ArithmeticExpression`,
  Example('+',
    Given('1 + 2'),
    Parses_to(`(+ 1 2)`)),

  Example('-',
    Given('1 - 2'),
    Parses_to(`(- 1 2)`)),

  Example('*',
    Given('1 * 2'),
    Parses_to(`(* 1 2)`)),

  Example('/',
    Given('1 / 2'),
    Parses_to(`(/ 1 2)`)),

  Example('%',
    Given('1 % 2'),
    Parses_to(`(% 1 2)`)),

  Example('>>',
    Given('$a >> $b'),
    Parses_to(`(>> (var "a") (var "b"))`)),

  Example('<<',
    Given('$a << $b'),
    Parses_to(`(<< (var "a") (var "b"))`)),
)

Example(`AssignmentExpression`,
  Given('$a = 1'),
  Parses_to(`(= (var "a") 1)`))

Example(`BlockExpression`,
  Given(`$a = 1 $b = 2`),
  Parses_to(`(block (= (var "a") 1) (= (var "b") 2))`))

Examples(`BooleanExpression`,
  Example('and',
    Given('true and false'),
    Parses_to(`(and true false)`)),

  Example('or',
    Given('true or false'),
    Parses_to(`(or true false)`)),
)

Examples(`CapabilityMapping`,
  Example(`produces`,
    Given(`MyCap produces Cap { attr => $value }`),
    Parses_to(`(produces (qr "MyCap") ["Cap" (=> "attr" (var "value"))])`)),

  Example(`consumes`,
    Given(`MyCap consumes Cap { attr => $value }`),
    Parses_to(`(consumes (qr "MyCap") ["Cap" (=> "attr" (var "value"))])`)),
)

Example(`CallFunctionExpression`,
  Given(`x() |String $y| {}`),
  Parses_to(`(invoke {:functor (qn "x") :args [] :block (lambda {:params {:y {:type (qr "String")}}})})`))

Example(`CallNamedFunctionExpression`,
  Given(`x($y)`),
  Parses_to(`(invoke {:functor (qn "x") :args [(var "y")]})`))

Example(`CallMethodExpression`,
  Given(`x.f($y)`),
  Parses_to(`(call-method {:functor (. (qn "x") (qn "f")) :args [(var "y")]})`))

Example(`CaseExpression`,
  Given(`case $x { 'x': { $x } default: { $y } }`),
  Parses_to(`(case (var "x") [{:when ["x"] :then [(var "x")]} {:when [(default)] :then [(var "y")]}])`))

Examples(`CollectExpression`,
  Example(`ExportedQuery`,
    Given(`File <<| mode == '0644' |>>`),
    Parses_to(`(collect {:type (qr "File") :query (exported-query (== (qn "mode") "0644"))})`)),

  Example(`VirtualQuery`,
    Given(`File <| mode == '0644' |>`),
    Parses_to(`(collect {:type (qr "File") :query (virtual-query (== (qn "mode") "0644"))})`))
)

Examples(`ComparisonExpression`,
  Example('==',
    Given('1 == 2'),
    Parses_to(`(== 1 2)`)),

  Example('!=',
    Given('1 != 2'),
    Parses_to(`(!= 1 2)`)),

  Example('<',
    Given('1 < 2'),
    Parses_to(`(< 1 2)`)),

  Example('<=',
    Given('1 <= 2'),
    Parses_to(`(<= 1 2)`)),

  Example('>',
    Given('1 > 2'),
    Parses_to(`(> 1 2)`)),

  Example('>=',
    Given('1 >= 2'),
    Parses_to(`(>= 1 2)`)),
)

Examples(`ConcatenatedString`,
  Example(`plain`,
    Given(`"a$x"`),
    Parses_to(`(concat "a" (str (var "x"))))`)),

  Example(`only one interpolation`,
    Given(`"$x"`),
    Parses_to(`(concat (str (var "x"))))`)),

  Example(`only two interpolations`,
    Given(`"$x$y"`),
    Parses_to(`(concat (str (var "x")) (str (var "y"))))`)),

  Example(`tab`,
    Given(`"\t$x"`),
    Parses_to(`(concat "\t" (str (var "x")))`)),

  Example(`cr`,
    Given(`"\r$x"`),
    Parses_to(`(concat "\r" (str (var "x")))`)),

  Example(`nl`,
    Given(`"\n$x"`),
    Parses_to(`(concat "\n" (str (var "x")))`)),

  Example(`space`,
    Given(`"\s$x"`),
    Parses_to(`(concat " " (str (var "x")))`)),

  Example(`control`,
    Given(`"\u{14}$x"`),
    Parses_to(`(concat "\o024" (str (var "x")))`)),

  Example(`complex interpolation`,
    Given(`"x${y + $x[3]}."`),
    Parses_to(`(concat "x" (str (+ (qn "y") (access (var "x") 3))) ".")`)),
)

Examples('EppExpression',
  Example(`empty`,
    Given(Epp_source(``)),
    Parses_to(`(lambda {:body [(epp)]})`)),

  Example(`comment`,
    Given(Epp_source(`some<%#%> text`)),
    Parses_to(`(lambda {:body [(epp (render-s "some text"))]})`)),

  Example(`empty argument list`,
    Given(Epp_source(`<%||%> some text`)),
    Parses_to(`(lambda {:body [(epp (render-s " some text"))]})`)),

  Example(`single line with expression`,
    Given(Epp_source(`<%-||-%> some <%- $x = 3 %> text`)),
    Parses_to(`(lambda {:body [(epp (render-s "some") (= (var "x") 3) (render-s " text"))]})`)),

  Example(`multi-line text`,
    Given(Epp_source(@(SRC))),
      some arbitrary text
      spanning multiple lines
      |-SRC
    Parses_to(`(lambda {:body [(epp (render-s "some arbitrary text\nspanning multiple lines"))]})`)),

  Example(`parameter and expression`,
    Given(Epp_source(@(SRC))),
      <%- | Boolean $a | -%>
      v = <%= $a %>
      |-SRC
    Parses_to(`(lambda {:params {:a {:type (qr "Boolean")}} :body [(epp (render-s "v = ") (render (var "a")))]})`))
)

Examples(`FunctionDefinition`,
  Example(`without parameters`,
    Given(`function a() {}`),
    Parses_to(`(function {:name "a"})`)),

  Example(`with parameter`,
    Given(`function a($b) {}`),
    Parses_to(`(function {:name "a" :params {:b {}}})`)),

  Example(`with parameter using type and default`,
    Given(`function a(String $b = 3) {}`),
    Parses_to(`(function {:name "a" :params {:b {:type (qr "String") :value 3}}}))`)),

  Example(`with body`,
    Given(`function a { $a = 2 }`),
    Parses_to(`(function {:name "a" :body [(= (var "a") 2)]})`)),

  Example(`with return type`,
    Given(`function a() >> Integer { 2 }`),
    Parses_to(`(function {:name "a" :body [2] :returns (qr "Integer")})`)),
)

Examples(`HeredocExpression`,
  Example(`empty`,
    Given(@(SRC)),
      @(END)
      END
      |SRC
    Parses_to(`(heredoc {:text ""})`)),

  Example(`text`,
    Given(@(SRC)),
      @(END)
      This is
      heredoc text
      END
      |SRC
    Parses_to(`(heredoc {:text "This is\nheredoc text\n"})`)),

  Example(`more than one on the same line`,
    Given(@(SRC)),
      { a => @(ONE), b => @(TWO) }
      The first
      heredoc text
      -ONE
      The second
      heredoc text
      -TWO
      |SRC
    Parses_to(@(PN))),
      (hash
        (=> (qn "a") (heredoc {:text "The first\nheredoc text"}))
        (=> (qn "b") (heredoc {:text "The second\nheredoc text"})))
      PN

  Example(`with syntax`,
    Given(@(SRC)),
       @(END:syntax)
       This is
       heredoc text
       END
       |SRC
    Parses_to(`(heredoc {:syntax "syntax" :text "This is\nheredoc text\n"})`))
)

Examples(`HostClassDefinition`,
  Example(`without parameters`,
    Given(`class a {}`),
    Parses_to(`(class {:name "a"})`)),

  Example(`with parameter`,
    Given(`class a($b) {}`),
    Parses_to(`(class {:name "a" :params {:b {}}})`)),

  Example(`with parameter using type and default`,
    Given(`class a(String $b = 3) {}`),
    Parses_to(`(class {:name "a" :params {:b {:type (qr "String") :value 3}}}))`)),

  Example(`with body`,
    Given(`class a { $a = 2 }`),
    Parses_to(`(class {:name "a" :body [(= (var "a") 2)]})`)),
)

Examples(`IfExpression`,
  Example(`without else`,
    Given(`if 1 { true }`),
    Parses_to(`(if {:test 1 :then [true]})`)),

  Example(`with else`,
    Given(`if 1 { true } else { false }`),
    Parses_to(`(if {:test 1 :then [true] :else [false]})`)),

  Example(`nested`,
    Given(`if 1 { true } else { if 2 { false } }`),
    Parses_to(`(if {:test 1 :then [true] :else [(if {:test 2 :then [false]})]})`)),
)

Example('InExpression',
  Given(`'eat' in ['eat', 'ate', 'eating']`),
  Parses_to(`(in "eat" (array "eat" "ate" "eating"))`))

Examples(`LiteralBoolean`,
  Example(`true`,
    Given(`true`),
    Parses_to(`true`)),

  Example(`false`,
    Given(`false`),
    Parses_to(`false`)),
)

Examples(`LiteralFloat`,
  Example('42.3',
    Given(`42.3`),
    Parses_to(`42.3`)),

  Example('-42.3',
    Given(`-42.3`),
    Parses_to(`-42.3`)),

  Example('0.3e34',
    Given(`0.3e34`),
    Parses_to(`0.3e34`)),
)

Example(`LiteralDefault`,
  Given(`default`),
  Parses_to(`(default)`))

Example(`LiteralHash`,
  Given(`{'a' => 1, 'b' => 2.0, true => false, ['a', 'b'] => undef}`),
  Parses_to(`(hash (=> "a" 1) (=> "b" 2.0) (=> true false) (=> (array "a" "b") nil))`))

Examples(`LiteralInteger`,
  Example('decimal',
    Given(`42`),
    Parses_to(`42`)),

  Example('octal',
    Given(`042`),
    Parses_to(`(int {:radix 8 :value 34})`)),

  Example('hexadecimal',
    Given(`0x42`),
    Parses_to(`(int {:radix 16 :value 66})`)),
)

Example(`LiteralList`,
  Given(`[1, 2.0, true, 'a', undef]`),
  Parses_to(`(array 1 2.0 true "a" nil)`))

Example(`LiteralRegularExpression`,
  Given(`/a/`),
  Parses_to(`(regexp "a")`))

Example(`LiteralString`,
  Given(`'a'`),
  Parses_to(`"a"`))

Examples('MatchExpression',
  Example('=~',
    Given(`'a' =~ /a/`),
    Parses_to(`(=~ "a" (regexp "a"))`)),

  Example('!~',
    Given(`'a' !~ /a/`),
    Parses_to(`(!~ "a" (regexp "a"))`))
)

Example(`NamedAccessExpression`,
  Given('a.b.c'),
  Parses_to(`(call-method {:functor (. (call-method {:functor (. (qn "a") (qn "b")) :args []}) (qn "c")) :args []})`))

Examples(`NodeDefinition`,
  Example('name',
    Given('node example.com {}'),
    Parses_to(`(node {:matches ["example.com"]})`)),

  Example('IP-address',
    Given('node 192.168.0.1 {}'),
    Parses_to(`(node {:matches ["192.168.0.1"]})`)),

  Example('pattern',
    Given('node /.*\.com/ {}'),
    Parses_to(`(node {:matches [(regexp ".*\\.com")]})`)),

  Example('multiple pattern',
    Given('node /.*\.com/, /.*\.org/ {}'),
    Parses_to(`(node {:matches [(regexp ".*\\.com") (regexp ".*\\.org")]})`)),
)

Example(`NotExpression`,
  Given('!true'),
  Parses_to(`(! true)`))

Examples(`PlanDefinition`,
  Given(Parser_options(tasks => true)),

  Example(`without parameters`,
    Given(`plan a() {}`),
    Parses_to(`(plan {:name "a"})`)),

  Example(`with parameter`,
    Given(`plan a($b) {}`),
    Parses_to(`(plan {:name "a" :params {:b {}}})`)),

  Example(`with parameter using type and default`,
    Given(`plan a(String $b = 3) {}`),
    Parses_to(`(plan {:name "a" :params {:b {:type (qr "String") :value 3}}}))`)),

  Example(`with body`,
    Given(`plan a { $a = 2 }`),
    Parses_to(`(plan {:name "a" :body [(= (var "a") 2)]})`)),

#  Example(`with return type`,
#    Given(`plan a() >> Integer { 2 }`),
#    Parses_to(`(plan {:name "a" :body [2] :returns (qr "Integer")})`)),
)

Example(`ParenthesizedExpression`,
  Given('(1 + 2)'),
  Parses_to(`(paren (+ 1 2))`))

Example(`QualifiedName`,
  Given('a::b::c'),
  Parses_to(`(qn "a::b::c")`))

Example(`QualifiedReference`,
  Given('Alpha::Beta::GammaWithCamel'),
  Parses_to(`(qr "Alpha::Beta::GammaWithCamel")`))

Examples(`RelationshipExpression`,
  Example('->',
    Given('$a -> $b'),
    Parses_to(`(-> (var "a") (var "b"))`)),

  Example('<-',
    Given('$a <- $b'),
    Parses_to(`(<- (var "a") (var "b"))`)),

  Example('~>',
    Given('$a ~> $b'),
    Parses_to(`(~> (var "a") (var "b"))`)),

  Example('<~',
    Given('$a <~ $b'),
    Parses_to(`(<~ (var "a") (var "b"))`)),
)

Example(`ResourceDefaultsExpression`,
  Given(`Something { message => 'syntax ok' }`),
  Parses_to(`(resource-defaults {:type (qr "Something") :ops [(=> "message" "syntax ok")]})`))

Examples(`ResourceDefinition`,
  Example(`without parameters`,
    Given(`define a {}`),
    Parses_to(`(define {:name "a"})`)),

  Example(`with parameter`,
    Given(`define a($b) {}`),
    Parses_to(`(define {:name "a" :params {:b {}}})`)),

  Example(`with parameter using type and default`,
    Given(`define a(String $b = 3) {}`),
    Parses_to(`(define {:name "a" :params {:b {:type (qr "String") :value 3}}}))`)),

  Example(`with body`,
    Given(`define a { $a = 2 }`),
    Parses_to(`(define {:name "a" :body [(= (var "a") 2)]})`)),
)

Examples(`ResourceExpression`,
  Example(`with one body`,
    Given(`file { '/tmp/foo': mode => '0640' }`),
    Parses_to(`(resource {:type (qn "file") :bodies [{:title "/tmp/foo" :ops [(=> "mode" "0640")]}]})`)),

  Example(`with multiple bodies`,
    Given(`file { '/tmp/foo': mode => '0640'; '/tmp/bar': mode => '0642' }`),
    Parses_to(`(resource {:type (qn "file") :bodies [{:title "/tmp/foo" :ops [(=> "mode" "0640")]} {:title "/tmp/bar" :ops [(=> "mode" "0642")]}]})`)),

  Example(`using *=>`,
    Given(`file { '/tmp/foo': * => { mode => '0777' }}`),
    Parses_to(`(resource {:type (qn "file") :bodies [{:title "/tmp/foo" :ops [(splat-hash (hash (=> (qn "mode") "0777")))]}]})`)),
)

Example(`ResourceOverrideExpression`,
  Given(`File['/tmp/foo.txt'] { mode => '0644' }`),
  Parses_to(`(resource-override {:resources (access (qr "File") "/tmp/foo.txt") :ops [(=> "mode" "0644")]})`))

Examples(`SelectorExpression`,
  Example('single',
    Given(`$x ? 'x' => 1`),
    Parses_to(`(? (var "x") [(=> "x" 1)])`)),

  Example('with default',
    Given(`$x ? { 'x' => 1, 'y' => 2, default => 3 }`),
    Parses_to(`(? (var "x") [(=> "x" 1) (=> "y" 2) (=> (default) 3)])`))
)

Example(`TypeAlias`,
  Given(`type MyType = Integer[0]`),
  Parses_to(`(type-alias "MyType" (access (qr "Integer") 0))`))

Examples(`TypeMapping`,
  Example(`direct`,
    Given(`type Runtime[ruby, 'MyModule::MyObject'] = MyPackage::MyObject`),
    Parses_to(`(type-mapping (access (qr "Runtime") (qn "ruby") "MyModule::MyObject") (qr "MyPackage::MyObject"))`)),

  Example(`using pattern`,
    Given(`type Runtime[ruby, [/^MyPackage::(\w+)$/, 'MyModule::\1']] = [/^MyModule::(\w+)$/, 'MyPackage::\1']`),
    Parses_to(`(type-mapping (access (qr "Runtime") (qn "ruby") (array (regexp "^MyPackage::(\\w+)$") "MyModule::\\1")) (array (regexp "^MyModule::(\\w+)$") "MyPackage::\\1"))`)),
)

Example(`UnaryMinusExpression`,
  Given('-$v'),
  Parses_to(`(- (var "v"))`))

Example(`UnfoldExpression`,
  Given('*$v'),
  Parses_to(`(unfold (var "v"))`))

Examples(`UnlessExpression`,
  Example(`without else`,
    Given(`unless 1 { true }`),
    Parses_to(`(unless {:test 1 :then [true]})`)),

  Example(`with else`,
    Given(`unless 1 { true } else { false }`),
    Parses_to(`(unless {:test 1 :then [true] :else [false]})`)),

  Example(`nested`,
    Given(`unless 1 { true } else { unless 2 { false } }`),
    Parses_to(`(unless {:test 1 :then [true] :else [(unless {:test 2 :then [false]})]})`)),
)
